{"ast":null,"code":"var _jsxFileName = \"/Users/kamleshnehra/Desktop/zolve/src/components/Camera/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport Measure from \"react-measure\";\nimport { useUserMedia, useCardRatio, useOffsets } from \"../../utils\";\nimport { Video, Canvas, Wrapper, Container, Flash, Overlay, Button } from \"./styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CAPTURE_OPTIONS = {\n  audio: false,\n  video: {\n    facingMode: \"environment\"\n  }\n};\nexport function Camera({\n  onCapture,\n  onClear\n}) {\n  _s();\n\n  const canvasRef = useRef();\n  const videoRef = useRef();\n  const [container, setContainer] = useState({\n    width: 0,\n    height: 0\n  });\n  const [isVideoPlaying, setIsVideoPlaying] = useState(false);\n  const [isCanvasEmpty, setIsCanvasEmpty] = useState(true);\n  const [isFlashing, setIsFlashing] = useState(false);\n  const mediaStream = useUserMedia(CAPTURE_OPTIONS);\n  const [aspectRatio, calculateRatio] = useCardRatio(1.586);\n  const offsets = useOffsets(videoRef.current && videoRef.current.videoWidth, videoRef.current && videoRef.current.videoHeight, container.width, container.height);\n\n  if (mediaStream && videoRef.current && !videoRef.current.srcObject) {\n    videoRef.current.srcObject = mediaStream;\n  }\n\n  function handleResize(contentRect) {\n    setContainer({\n      width: contentRect.bounds.width,\n      height: Math.round(contentRect.bounds.width / aspectRatio)\n    });\n  }\n\n  function handleCanPlay() {\n    calculateRatio(videoRef.current.videoHeight, videoRef.current.videoWidth);\n    setIsVideoPlaying(true);\n    videoRef.current.play();\n  }\n\n  function handleCapture() {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.drawImage(videoRef.current, offsets.x, offsets.y, container.width, container.height, 0, 0, container.width, container.height);\n    canvasRef.current.toBlob(blob => onCapture(blob), \"image/jpeg\", 1);\n    setIsCanvasEmpty(false);\n    setIsFlashing(true);\n  }\n\n  function handleClear() {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    setIsCanvasEmpty(true);\n    onClear();\n  }\n\n  if (!mediaStream) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Measure, {\n    bounds: true,\n    onResize: handleResize,\n    children: ({\n      measureRef\n    }) => /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        ref: measureRef,\n        maxHeight: videoRef.current && videoRef.current.videoHeight,\n        maxWidth: videoRef.current && videoRef.current.videoWidth,\n        style: {\n          height: `${container.height}px`\n        },\n        children: [/*#__PURE__*/_jsxDEV(Video, {\n          ref: videoRef,\n          hidden: !isVideoPlaying,\n          onCanPlay: handleCanPlay,\n          autoPlay: true,\n          playsInline: true,\n          muted: true,\n          style: {\n            top: `-${offsets.y}px`,\n            left: `-${offsets.x}px`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Overlay, {\n          hidden: !isVideoPlaying\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n          ref: canvasRef,\n          width: container.width,\n          height: container.height\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Flash, {\n          flash: isFlashing,\n          onAnimationEnd: () => setIsFlashing(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), isVideoPlaying && /*#__PURE__*/_jsxDEV(Button, {\n        onClick: isCanvasEmpty ? handleCapture : handleClear,\n        children: isCanvasEmpty ? \"Take a picture\" : \"Take another picture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Camera, \"W+6BgjM/swxqkFBWFa94GjWqkuA=\", false, function () {\n  return [useUserMedia, useCardRatio, useOffsets];\n});\n\n_c = Camera;\n\nvar _c;\n\n$RefreshReg$(_c, \"Camera\");","map":{"version":3,"sources":["/Users/kamleshnehra/Desktop/zolve/src/components/Camera/index.js"],"names":["React","useState","useRef","Measure","useUserMedia","useCardRatio","useOffsets","Video","Canvas","Wrapper","Container","Flash","Overlay","Button","CAPTURE_OPTIONS","audio","video","facingMode","Camera","onCapture","onClear","canvasRef","videoRef","container","setContainer","width","height","isVideoPlaying","setIsVideoPlaying","isCanvasEmpty","setIsCanvasEmpty","isFlashing","setIsFlashing","mediaStream","aspectRatio","calculateRatio","offsets","current","videoWidth","videoHeight","srcObject","handleResize","contentRect","bounds","Math","round","handleCanPlay","play","handleCapture","context","getContext","drawImage","x","y","toBlob","blob","handleClear","clearRect","measureRef","top","left"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport Measure from \"react-measure\";\nimport { useUserMedia, useCardRatio, useOffsets } from \"../../utils\";\n\nimport {\n  Video,\n  Canvas,\n  Wrapper,\n  Container,\n  Flash,\n  Overlay,\n  Button\n} from \"./styles\";\n\nconst CAPTURE_OPTIONS = {\n  audio: false,\n  video: { facingMode: \"environment\" }\n};\n\nexport function Camera({ onCapture, onClear }) {\n  const canvasRef = useRef();\n  const videoRef = useRef();\n\n  const [container, setContainer] = useState({ width: 0, height: 0 });\n  const [isVideoPlaying, setIsVideoPlaying] = useState(false);\n  const [isCanvasEmpty, setIsCanvasEmpty] = useState(true);\n  const [isFlashing, setIsFlashing] = useState(false);\n\n  const mediaStream = useUserMedia(CAPTURE_OPTIONS);\n  const [aspectRatio, calculateRatio] = useCardRatio(1.586);\n  const offsets = useOffsets(\n    videoRef.current && videoRef.current.videoWidth,\n    videoRef.current && videoRef.current.videoHeight,\n    container.width,\n    container.height\n  );\n\n  if (mediaStream && videoRef.current && !videoRef.current.srcObject) {\n    videoRef.current.srcObject = mediaStream;\n  }\n\n  function handleResize(contentRect) {\n    setContainer({\n      width: contentRect.bounds.width,\n      height: Math.round(contentRect.bounds.width / aspectRatio)\n    });\n  }\n\n  function handleCanPlay() {\n    calculateRatio(videoRef.current.videoHeight, videoRef.current.videoWidth);\n    setIsVideoPlaying(true);\n    videoRef.current.play();\n  }\n\n  function handleCapture() {\n    const context = canvasRef.current.getContext(\"2d\");\n\n    context.drawImage(\n      videoRef.current,\n      offsets.x,\n      offsets.y,\n      container.width,\n      container.height,\n      0,\n      0,\n      container.width,\n      container.height\n    );\n\n    canvasRef.current.toBlob(blob => onCapture(blob), \"image/jpeg\", 1);\n    setIsCanvasEmpty(false);\n    setIsFlashing(true);\n  }\n\n  function handleClear() {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    setIsCanvasEmpty(true);\n    onClear();\n  }\n\n  if (!mediaStream) {\n    return null;\n  }\n\n  return (\n    <Measure bounds onResize={handleResize}>\n      {({ measureRef }) => (\n        <Wrapper>\n          <Container\n            ref={measureRef}\n            maxHeight={videoRef.current && videoRef.current.videoHeight}\n            maxWidth={videoRef.current && videoRef.current.videoWidth}\n            style={{\n              height: `${container.height}px`\n            }}\n          >\n            <Video\n              ref={videoRef}\n              hidden={!isVideoPlaying}\n              onCanPlay={handleCanPlay}\n              autoPlay\n              playsInline\n              muted\n              style={{\n                top: `-${offsets.y}px`,\n                left: `-${offsets.x}px`\n              }}\n            />\n\n            <Overlay hidden={!isVideoPlaying} />\n\n            <Canvas\n              ref={canvasRef}\n              width={container.width}\n              height={container.height}\n            />\n\n            <Flash\n              flash={isFlashing}\n              onAnimationEnd={() => setIsFlashing(false)}\n            />\n          </Container>\n\n          {isVideoPlaying && (\n            <Button onClick={isCanvasEmpty ? handleCapture : handleClear}>\n              {isCanvasEmpty ? \"Take a picture\" : \"Take another picture\"}\n            </Button>\n          )}\n        </Wrapper>\n      )}\n    </Measure>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}