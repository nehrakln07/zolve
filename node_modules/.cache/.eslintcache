[{"/Users/kamleshnehra/Desktop/zolve/src/index.js":"1","/Users/kamleshnehra/Desktop/zolve/src/App.js":"2","/Users/kamleshnehra/Desktop/zolve/src/reportWebVitals.js":"3","/Users/kamleshnehra/Desktop/zolve/src/components/home.js":"4","/Users/kamleshnehra/Desktop/zolve/src/components/copyToClipboard.js":"5","/Users/kamleshnehra/Desktop/zolve/src/components/selfieView.js":"6","/Users/kamleshnehra/Desktop/zolve/src/components/chart.js":"7","/Users/kamleshnehra/Desktop/zolve/src/components/Camera/index.js":"8","/Users/kamleshnehra/Desktop/zolve/src/components/Camera/styles.js":"9","/Users/kamleshnehra/Desktop/zolve/src/utils/index.js":"10"},{"size":526,"mtime":1615920701210,"results":"11","hashOfConfig":"12"},{"size":906,"mtime":1615958423508,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1615734664144,"results":"14","hashOfConfig":"12"},{"size":3360,"mtime":1615956893808,"results":"15","hashOfConfig":"12"},{"size":878,"mtime":1615954733345,"results":"16","hashOfConfig":"12"},{"size":941,"mtime":1615959238534,"results":"17","hashOfConfig":"12"},{"size":1220,"mtime":1615957243987,"results":"18","hashOfConfig":"12"},{"size":3473,"mtime":1615959237347,"results":"19","hashOfConfig":"12"},{"size":1438,"mtime":1615957991885,"results":"20","hashOfConfig":"12"},{"size":1574,"mtime":1615959233102,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1jifsj8",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kamleshnehra/Desktop/zolve/src/index.js",[],["46","47"],"/Users/kamleshnehra/Desktop/zolve/src/App.js",[],"/Users/kamleshnehra/Desktop/zolve/src/reportWebVitals.js",[],"/Users/kamleshnehra/Desktop/zolve/src/components/home.js",["48"],"import React, { useEffect, useState } from 'react';\nimport DateTime from \"react-datetime\";\nimport moment from \"moment\";\n\nimport Chart from \"./chart\";\n\nconst DATE_FORMAT = \"YYYY-MM-DD\";\nconst DEFAULT_PARAMS = {\n  order: \"desc\",\n  sort: \"popular\",\n  site: \"stackoverflow\"\n}\nconst Home = () => {\n  const [data, setData] = useState(null);\n  const [formdata, setFormData] = useState({\n    pagesize: 30,\n    page: 1\n  });\n\n\n\n  useEffect(() => {\n    fetchData();\n  }, [])\n\n  const fetchData = () => {\n    const params = {\n      page: formdata.page,\n      pagesize: formdata.pagesize,\n    }\n\n    if (formdata.fromdate) {\n      let date = new Date(moment(formdata.fromdate).format(DATE_FORMAT));\n      params.fromdate = date.getTime() / 1000;\n    }\n\n    if (formdata.todate) {\n      let date = new Date(formdata.todate);\n      params.todate = date.getTime() / 1000;\n    }\n\n    const url = \"https://api.stackexchange.com/2.2/tags?\" + toQueryString({ ...params, ...DEFAULT_PARAMS });\n    fetch(url)\n      .then(response => response.json())\n      .then(data => setData(data.items));\n  }\n\n  const handleChange = e => {\n    let temp = { ...formdata };\n    temp[e.target.name] = e.target.value\n    setFormData(temp);\n  }\n\n  const onDateChange = (key, value) => {\n    let temp = formdata;\n    temp[key] = value\n    setFormData(temp);\n  }\n\n  const toQueryString = (obj) => {\n    var parts = [];\n    for (var i in obj) {\n      if (obj.hasOwnProperty(i)) {\n        parts.push(encodeURIComponent(i) + \"=\" + encodeURIComponent(obj[i]));\n      }\n    }\n    return parts.join(\"&\");\n  }\n\n  const getFormatedData = (arr) => {\n    return arr.map((item, key) => {\n      return [item.name, item.count]\n    })\n  }\n\n  console.log(data);\n\n  return (\n    <div className=\"home\">\n      <div className=\"form-container\">\n        <div className=\"\">\n          <label>FromDate</label>\n          <DateTime\n            value={formdata.fromdate}\n            onChange={e => onDateChange('fromdate', e)}\n            dateFormat={DATE_FORMAT}\n            timeFormat={false}\n            className=\"col-lg-3 col-md-3\"\n            closeOnSelect\n          />\n        </div>\n        <div className=\"\">\n          <label>ToDate</label>\n          <DateTime\n            value={formdata.todate}\n            onChange={e => onDateChange('todate', e)}\n            dateFormat={DATE_FORMAT}\n            timeFormat={false}\n            className=\"col-lg-3 col-md-3\"\n            closeOnSelect\n          />\n        </div>\n        <div className=\"\" style={{display: 'flex', flexWrap: 'wrap'}}>\n          <label style={{width: \"100%\"}}>Page</label>\n          <input type=\"number\" name=\"page\" placeholder=\"page\" onChange={handleChange} value={formdata.page} />\n        </div>\n        <div className=\"\" style={{display: 'flex', flexWrap: 'wrap'}}>\n          <label style={{width: \"100%\"}}>PageSize</label>\n          <input type=\"number\" name=\"pagesize\" placeholder=\"pagesize\" onChange={handleChange} value={formdata.pagesize} />\n        </div>\n        <div className=\"\" style={{display: 'flex', flexWrap: 'wrap'}}>\n        <button className=\"\" style={{marginTop:'20px'}} onClick={fetchData} >Search</button>\n        </div>\n      </div>\n\n      {\n        data && data.length &&\n        <div className=\"chart-container\">\n          <Chart data={getFormatedData(data)} />\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default Home;\n","/Users/kamleshnehra/Desktop/zolve/src/components/copyToClipboard.js",[],"/Users/kamleshnehra/Desktop/zolve/src/components/selfieView.js",["49","50"],"import React, { useState, use } from 'react';\nimport { Camera } from './Camera';\n\n\nconst SelfieView = () => {\n  const [isCameraOpen, setIsCameraOpen] = useState(false);\n  const [cardImage, setCardImage] = useState();\n\n  return (\n    <div className=\"App\">\n      {isCameraOpen && (\n        <Camera\n          onCapture={blob => setCardImage(blob)}\n          onClear={() => setCardImage(undefined)}\n        />\n      )}\n\n      {cardImage && (\n        <div>\n          <h2>Preview</h2>\n          <img style={{ width: '100%', height: 'auto' }} src={cardImage && URL.createObjectURL(cardImage)} />\n        </div>\n      )}\n      <div>\n        <button onClick={() => setIsCameraOpen(true)}>Open Camera</button>\n        <button\n          onClick={() => {\n            setIsCameraOpen(false);\n            setCardImage(undefined);\n          }}\n        >\n          Close Camera\n          </button>\n      </div>\n    </div>\n  );\n}\n\nexport default SelfieView;\n","/Users/kamleshnehra/Desktop/zolve/src/components/chart.js",["51"],"import React, { Component } from \"react\";\n\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nconst Chart = props => {\n  const { data } = props;\n  console.log(data, \"data\");\n  const chartData = {\n    chart: {\n      type: 'column'\n    },\n    title: {\n      text: 'Bar Chart'\n    },\n    subtitle: {\n      text: ''\n    },\n    xAxis: {\n      type: 'category',\n      title: {\n        text: 'Languages '\n      },\n      labels: {\n        style: {\n          fontSize: '13px',\n          fontFamily: 'Verdana, sans-serif'\n        }\n      }\n    },\n    yAxis: {\n      min: 0,\n      title: {\n        text: 'Count '\n      }\n    },\n    legend: {\n      enabled: false\n    },\n    tooltip: {\n      pointFormat: 'Count: <b>{point.y:.1f}</b>'\n    },\n    series: [{\n      name: 'language',\n      data: [...data],\n      dataLabels: {\n        enabled: true,\n        color: '#FFFFFF',\n        format: '{point.y:.1f}',\n        y: 10,\n        style: {\n          fontSize: '13px',\n          fontFamily: 'Verdana, sans-serif'\n        }\n      }\n    }]\n  }\n\n  return (\n    <>\n      <HighchartsReact\n        highcharts={Highcharts}\n        options={chartData}\n      />\n    </>\n  );\n}\n\nexport default Chart;\n","/Users/kamleshnehra/Desktop/zolve/src/components/Camera/index.js",[],"/Users/kamleshnehra/Desktop/zolve/src/components/Camera/styles.js",[],"/Users/kamleshnehra/Desktop/zolve/src/utils/index.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":24,"column":6,"nodeType":"58","endLine":24,"endColumn":8,"suggestions":"59"},{"ruleId":"60","severity":1,"message":"61","line":1,"column":27,"nodeType":"62","messageId":"63","endLine":1,"endColumn":30},{"ruleId":"64","severity":1,"message":"65","line":21,"column":11,"nodeType":"66","endLine":21,"endColumn":110},{"ruleId":"60","severity":1,"message":"67","line":1,"column":17,"nodeType":"62","messageId":"63","endLine":1,"endColumn":26},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["70"],"no-unused-vars","'use' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Component' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},"Update the dependencies array to be: [fetchData]",{"range":"73","text":"74"},[461,463],"[fetchData]"]